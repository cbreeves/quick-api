import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseLong as __strictParseLong, take, withBaseException, } from "@smithy/smithy-client";
import { DrsServiceException as __BaseException } from "../models/DrsServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, UninitializedAccountException, ValidationException, } from "../models/models_0";
export const se_AssociateSourceNetworkStackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/AssociateSourceNetworkStack");
    let body;
    body = JSON.stringify(take(input, {
        cfnStackName: [],
        sourceNetworkID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateExtendedSourceServerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateExtendedSourceServer");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLaunchConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateLaunchConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        copyPrivateIp: [],
        copyTags: [],
        exportBucketArn: [],
        launchDisposition: [],
        launchIntoSourceInstance: [],
        licensing: (_) => _json(_),
        postLaunchEnabled: [],
        tags: (_) => _json(_),
        targetInstanceTypeRightSizingMethod: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateReplicationConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateReplicationConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        associateDefaultSecurityGroup: [],
        autoReplicateNewDisks: [],
        bandwidthThrottling: [],
        createPublicIP: [],
        dataPlaneRouting: [],
        defaultLargeStagingDiskType: [],
        ebsEncryption: [],
        ebsEncryptionKeyArn: [],
        pitPolicy: (_) => _json(_),
        replicationServerInstanceType: [],
        replicationServersSecurityGroupsIDs: (_) => _json(_),
        stagingAreaSubnetId: [],
        stagingAreaTags: (_) => _json(_),
        tags: (_) => _json(_),
        useDedicatedReplicationServer: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSourceNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateSourceNetwork");
    let body;
    body = JSON.stringify(take(input, {
        originAccountID: [],
        originRegion: [],
        tags: (_) => _json(_),
        vpcID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteJob");
    let body;
    body = JSON.stringify(take(input, {
        jobID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteLaunchActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteLaunchAction");
    let body;
    body = JSON.stringify(take(input, {
        actionId: [],
        resourceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteLaunchConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteLaunchConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        launchConfigurationTemplateID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteRecoveryInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteRecoveryInstance");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteReplicationConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteReplicationConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        replicationConfigurationTemplateID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteSourceNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteSourceNetwork");
    let body;
    body = JSON.stringify(take(input, {
        sourceNetworkID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteSourceServerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteSourceServer");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobLogItemsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeJobLogItems");
    let body;
    body = JSON.stringify(take(input, {
        jobID: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeJobs");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeLaunchConfigurationTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeLaunchConfigurationTemplates");
    let body;
    body = JSON.stringify(take(input, {
        launchConfigurationTemplateIDs: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeRecoveryInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeRecoveryInstances");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeRecoverySnapshotsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeRecoverySnapshots");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        order: [],
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeReplicationConfigurationTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeReplicationConfigurationTemplates");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        replicationConfigurationTemplateIDs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSourceNetworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeSourceNetworks");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSourceServersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeSourceServers");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisconnectRecoveryInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DisconnectRecoveryInstance");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisconnectSourceServerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DisconnectSourceServer");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ExportSourceNetworkCfnTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ExportSourceNetworkCfnTemplate");
    let body;
    body = JSON.stringify(take(input, {
        sourceNetworkID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFailbackReplicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetFailbackReplicationConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetLaunchConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetLaunchConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetReplicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetReplicationConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_InitializeServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/InitializeService");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListExtensibleSourceServersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListExtensibleSourceServers");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        stagingAccountID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListLaunchActionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListLaunchActions");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        resourceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListStagingAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ListStagingAccounts");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutLaunchActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutLaunchAction");
    let body;
    body = JSON.stringify(take(input, {
        actionCode: [],
        actionId: [],
        actionVersion: [],
        active: [],
        category: [],
        description: [],
        name: [],
        optional: [],
        order: [],
        parameters: (_) => _json(_),
        resourceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RetryDataReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/RetryDataReplication");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ReverseReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ReverseReplication");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartFailbackLaunchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartFailbackLaunch");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceIDs: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartRecoveryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartRecovery");
    let body;
    body = JSON.stringify(take(input, {
        isDrill: [],
        sourceServers: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartReplication");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSourceNetworkRecoveryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartSourceNetworkRecovery");
    let body;
    body = JSON.stringify(take(input, {
        deployAsNew: [],
        sourceNetworks: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSourceNetworkReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartSourceNetworkReplication");
    let body;
    body = JSON.stringify(take(input, {
        sourceNetworkID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopFailbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StopFailback");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StopReplication");
    let body;
    body = JSON.stringify(take(input, {
        sourceServerID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopSourceNetworkReplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StopSourceNetworkReplication");
    let body;
    body = JSON.stringify(take(input, {
        sourceNetworkID: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TerminateRecoveryInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/TerminateRecoveryInstances");
    let body;
    body = JSON.stringify(take(input, {
        recoveryInstanceIDs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateFailbackReplicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateFailbackReplicationConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        bandwidthThrottling: [],
        name: [],
        recoveryInstanceID: [],
        usePrivateIP: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateLaunchConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateLaunchConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        copyPrivateIp: [],
        copyTags: [],
        launchDisposition: [],
        launchIntoInstanceProperties: (_) => _json(_),
        licensing: (_) => _json(_),
        name: [],
        postLaunchEnabled: [],
        sourceServerID: [],
        targetInstanceTypeRightSizingMethod: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateLaunchConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateLaunchConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        copyPrivateIp: [],
        copyTags: [],
        exportBucketArn: [],
        launchConfigurationTemplateID: [],
        launchDisposition: [],
        launchIntoSourceInstance: [],
        licensing: (_) => _json(_),
        postLaunchEnabled: [],
        targetInstanceTypeRightSizingMethod: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateReplicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateReplicationConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        associateDefaultSecurityGroup: [],
        autoReplicateNewDisks: [],
        bandwidthThrottling: [],
        createPublicIP: [],
        dataPlaneRouting: [],
        defaultLargeStagingDiskType: [],
        ebsEncryption: [],
        ebsEncryptionKeyArn: [],
        name: [],
        pitPolicy: (_) => _json(_),
        replicatedDisks: (_) => _json(_),
        replicationServerInstanceType: [],
        replicationServersSecurityGroupsIDs: (_) => _json(_),
        sourceServerID: [],
        stagingAreaSubnetId: [],
        stagingAreaTags: (_) => _json(_),
        useDedicatedReplicationServer: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateReplicationConfigurationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateReplicationConfigurationTemplate");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
        associateDefaultSecurityGroup: [],
        autoReplicateNewDisks: [],
        bandwidthThrottling: [],
        createPublicIP: [],
        dataPlaneRouting: [],
        defaultLargeStagingDiskType: [],
        ebsEncryption: [],
        ebsEncryptionKeyArn: [],
        pitPolicy: (_) => _json(_),
        replicationConfigurationTemplateID: [],
        replicationServerInstanceType: [],
        replicationServersSecurityGroupsIDs: (_) => _json(_),
        stagingAreaSubnetId: [],
        stagingAreaTags: (_) => _json(_),
        useDedicatedReplicationServer: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociateSourceNetworkStackCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateExtendedSourceServerCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceServer: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLaunchConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchConfigurationTemplate: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateReplicationConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        associateDefaultSecurityGroup: __expectBoolean,
        autoReplicateNewDisks: __expectBoolean,
        bandwidthThrottling: __expectLong,
        createPublicIP: __expectBoolean,
        dataPlaneRouting: __expectString,
        defaultLargeStagingDiskType: __expectString,
        ebsEncryption: __expectString,
        ebsEncryptionKeyArn: __expectString,
        pitPolicy: _json,
        replicationConfigurationTemplateID: __expectString,
        replicationServerInstanceType: __expectString,
        replicationServersSecurityGroupsIDs: _json,
        stagingAreaSubnetId: __expectString,
        stagingAreaTags: _json,
        tags: _json,
        useDedicatedReplicationServer: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSourceNetworkCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceNetworkID: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLaunchActionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLaunchConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRecoveryInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteReplicationConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSourceNetworkCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSourceServerCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeJobLogItemsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeLaunchConfigurationTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRecoveryInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRecoverySnapshotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeReplicationConfigurationTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSourceNetworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: (_) => de_SourceNetworksList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSourceServersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisconnectRecoveryInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisconnectSourceServerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersion: __expectString,
        arn: __expectString,
        dataReplicationInfo: _json,
        lastLaunchResult: __expectString,
        lifeCycle: _json,
        recoveryInstanceId: __expectString,
        replicationDirection: __expectString,
        reversedDirectionSourceServerArn: __expectString,
        sourceCloudProperties: _json,
        sourceNetworkID: __expectString,
        sourceProperties: _json,
        sourceServerID: __expectString,
        stagingArea: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportSourceNetworkCfnTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        s3DestinationUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFailbackReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        bandwidthThrottling: __expectLong,
        name: __expectString,
        recoveryInstanceID: __expectString,
        usePrivateIP: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        copyPrivateIp: __expectBoolean,
        copyTags: __expectBoolean,
        ec2LaunchTemplateID: __expectString,
        launchDisposition: __expectString,
        launchIntoInstanceProperties: _json,
        licensing: _json,
        name: __expectString,
        postLaunchEnabled: __expectBoolean,
        sourceServerID: __expectString,
        targetInstanceTypeRightSizingMethod: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associateDefaultSecurityGroup: __expectBoolean,
        autoReplicateNewDisks: __expectBoolean,
        bandwidthThrottling: __expectLong,
        createPublicIP: __expectBoolean,
        dataPlaneRouting: __expectString,
        defaultLargeStagingDiskType: __expectString,
        ebsEncryption: __expectString,
        ebsEncryptionKeyArn: __expectString,
        name: __expectString,
        pitPolicy: _json,
        replicatedDisks: _json,
        replicationServerInstanceType: __expectString,
        replicationServersSecurityGroupsIDs: _json,
        sourceServerID: __expectString,
        stagingAreaSubnetId: __expectString,
        stagingAreaTags: _json,
        useDedicatedReplicationServer: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_InitializeServiceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ListExtensibleSourceServersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLaunchActionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStagingAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        accounts: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutLaunchActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionCode: __expectString,
        actionId: __expectString,
        actionVersion: __expectString,
        active: __expectBoolean,
        category: __expectString,
        description: __expectString,
        name: __expectString,
        optional: __expectBoolean,
        order: __expectInt32,
        parameters: _json,
        resourceId: __expectString,
        type: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RetryDataReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentVersion: __expectString,
        arn: __expectString,
        dataReplicationInfo: _json,
        lastLaunchResult: __expectString,
        lifeCycle: _json,
        recoveryInstanceId: __expectString,
        replicationDirection: __expectString,
        reversedDirectionSourceServerArn: __expectString,
        sourceCloudProperties: _json,
        sourceNetworkID: __expectString,
        sourceProperties: _json,
        sourceServerID: __expectString,
        stagingArea: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ReverseReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        reversedDirectionSourceServerArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartFailbackLaunchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartRecoveryCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceServer: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSourceNetworkRecoveryCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSourceNetworkReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceNetwork: (_) => de_SourceNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopFailbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceServer: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopSourceNetworkReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        sourceNetwork: (_) => de_SourceNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TerminateRecoveryInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        job: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFailbackReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        copyPrivateIp: __expectBoolean,
        copyTags: __expectBoolean,
        ec2LaunchTemplateID: __expectString,
        launchDisposition: __expectString,
        launchIntoInstanceProperties: _json,
        licensing: _json,
        name: __expectString,
        postLaunchEnabled: __expectBoolean,
        sourceServerID: __expectString,
        targetInstanceTypeRightSizingMethod: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLaunchConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchConfigurationTemplate: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associateDefaultSecurityGroup: __expectBoolean,
        autoReplicateNewDisks: __expectBoolean,
        bandwidthThrottling: __expectLong,
        createPublicIP: __expectBoolean,
        dataPlaneRouting: __expectString,
        defaultLargeStagingDiskType: __expectString,
        ebsEncryption: __expectString,
        ebsEncryptionKeyArn: __expectString,
        name: __expectString,
        pitPolicy: _json,
        replicatedDisks: _json,
        replicationServerInstanceType: __expectString,
        replicationServersSecurityGroupsIDs: _json,
        sourceServerID: __expectString,
        stagingAreaSubnetId: __expectString,
        stagingAreaTags: _json,
        useDedicatedReplicationServer: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateReplicationConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        associateDefaultSecurityGroup: __expectBoolean,
        autoReplicateNewDisks: __expectBoolean,
        bandwidthThrottling: __expectLong,
        createPublicIP: __expectBoolean,
        dataPlaneRouting: __expectString,
        defaultLargeStagingDiskType: __expectString,
        ebsEncryption: __expectString,
        ebsEncryptionKeyArn: __expectString,
        pitPolicy: _json,
        replicationConfigurationTemplateID: __expectString,
        replicationServerInstanceType: __expectString,
        replicationServersSecurityGroupsIDs: _json,
        stagingAreaSubnetId: __expectString,
        stagingAreaTags: _json,
        tags: _json,
        useDedicatedReplicationServer: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.drs#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.drs#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.drs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.drs#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.drs#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UninitializedAccountException":
        case "com.amazonaws.drs#UninitializedAccountException":
            throw await de_UninitializedAccountExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.drs#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.drs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseLong(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
        quotaCode: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [, parsedOutput.headers[_ra]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UninitializedAccountExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UninitializedAccountException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        fieldList: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RecoveryLifeCycle = (output, context) => {
    return take(output, {
        apiCallDateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobID: __expectString,
        lastRecoveryResult: __expectString,
    });
};
const de_SourceNetwork = (output, context) => {
    return take(output, {
        arn: __expectString,
        cfnStackName: __expectString,
        lastRecovery: (_) => de_RecoveryLifeCycle(_, context),
        launchedVpcID: __expectString,
        replicationStatus: __expectString,
        replicationStatusDetails: __expectString,
        sourceAccountID: __expectString,
        sourceNetworkID: __expectString,
        sourceRegion: __expectString,
        sourceVpcID: __expectString,
        tags: _json,
    });
};
const de_SourceNetworksList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SourceNetwork(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _mR = "maxResults";
const _nT = "nextToken";
const _rAS = "retryAfterSeconds";
const _ra = "retry-after";
const _tK = "tagKeys";
